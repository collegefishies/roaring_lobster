-- File: with_uart.vhd
-- Generated by MyHDL 1.0dev
-- Date: Tue Jul 19 10:29:12 2016


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_10.all;

entity with_uart is
    port (
        clk: in std_logic;
        amphenol: out unsigned(49 downto 0);
        fpga_rx: in std_logic;
        fpga_tx: in std_logic;
        trigger: in std_logic;
        led2: out unsigned(8 downto 0);
        reset: in std_logic
    );
end entity with_uart;


architecture MyHDL of with_uart is


type t_enum_sched_1 is (
    START,
    INCREMENTING,
    HOLDING,
    FINISHED
);
type t_enum_t_state_2 is (
    READWHICHRAM,
    PARSEFORRAM,
    SENDTORAM
);

signal hex_freq: unsigned(35 downto 0);
signal sched_len: unsigned(6 downto 0);
signal led2_i: unsigned(8 downto 0);
signal notclock: std_logic;
signal all_data_received: std_logic;
signal trigger_mask: std_logic;
signal whichram: unsigned(7 downto 0);
signal biggestblock: unsigned(31 downto 0);
signal state: t_enum_t_state_2;
signal rx_data: unsigned(7 downto 0);
signal drdy: std_logic;
signal freq_rambus_addr: unsigned(7 downto 0);
signal fstep_rambus_addr: unsigned(7 downto 0);
signal tstep_rambus_addr: unsigned(7 downto 0);
signal hold_rambus_addr: unsigned(7 downto 0);
signal freq_man_reset: std_logic;
signal freq_rambus_length: unsigned(6 downto 0);
signal fstep_rambus_length: unsigned(6 downto 0);
signal tstep_rambus_length: unsigned(6 downto 0);
signal hold_rambus_length: unsigned(6 downto 0);
signal freq_rambus_din: unsigned(31 downto 0);
signal fstep_rambus_din: unsigned(31 downto 0);
signal tstep_rambus_din: unsigned(31 downto 0);
signal hold_rambus_din: unsigned(31 downto 0);
signal freq_rambus_clk: std_logic;
signal fstep_rambus_clk: std_logic;
signal tstep_rambus_clk: std_logic;
signal hold_rambus_clk: std_logic;
signal freq_rambus_waddr: unsigned(6 downto 0);
signal fstep_rambus_waddr: unsigned(6 downto 0);
signal tstep_rambus_waddr: unsigned(6 downto 0);
signal hold_rambus_waddr: unsigned(6 downto 0);
signal freq_manager_2_sched_addr: unsigned(6 downto 0);
signal freq_manager_2_add: std_logic;
signal freq_manager_2_sub: std_logic;
signal freq_manager_2_bin_count: signed (30 downto 0);
signal freq_manager_2_hex_count: unsigned(35 downto 0);
signal freq_manager_2_dig_incr: unsigned(3 downto 0);
signal freq_manager_2_dig_incr_offset: unsigned(3 downto 0);
signal freq_manager_2_fstep_rambus_dout: unsigned(31 downto 0);
signal freq_manager_2_freq_rambus_raddr: unsigned(6 downto 0);
signal freq_manager_2_fstep_rambus_raddr: unsigned(6 downto 0);
signal freq_manager_2_tstep_rambus_raddr: unsigned(6 downto 0);
signal freq_manager_2_holdt_rambus_raddr: unsigned(6 downto 0);
signal freq_manager_2_state: t_enum_sched_1;
signal freq_manager_2_hold_counter: unsigned(31 downto 0);
signal freq_manager_2_freq_rambus_dout: unsigned(31 downto 0);
signal freq_manager_2_holdt_rambus_dout: unsigned(31 downto 0);
signal freq_manager_2_hex_counter_2_time_step: unsigned(31 downto 0);
signal freq_manager_2_hex_counter_2_hex_int: unsigned(35 downto 0);
signal freq_manager_2_hex_counter_2_bin_int: unsigned(29 downto 0);
signal freq_manager_2_hex_counter_2_int_clk: std_logic;
signal freq_manager_2_hex_counter_2_clk_p_time: std_logic;
signal freq_manager_2_hex_counter_2_clk_counter: unsigned(31 downto 0);
signal freq_manager_2_hex_counter_2_rom_4_dout: unsigned(29 downto 0);
signal freq_manager_2_bussedram_8_rambus_we: std_logic;
signal freq_manager_2_bussedram_9_rambus_we: std_logic;
signal freq_manager_2_bussedram_10_rambus_we: std_logic;
signal freq_manager_2_bussedram_11_rambus_we: std_logic;
signal freq_manager_2_rom_5_dout: unsigned(29 downto 0);
signal uart_2_baud: std_logic;
signal uart_2_slowbaud: std_logic;
signal uart_2_slowbaud_rst: std_logic;
signal uart_2_started: std_logic;
signal uart_2_bauds_held_down: unsigned(2 downto 0);
signal uart_2_bits_received: unsigned(4 downto 0);
signal uart_2_drdy_int: std_logic;
signal uart_2_latch_en: std_logic;
signal uart_2_drdy1: std_logic;
signal uart_2_drdy2: std_logic;
signal uart_2_rx_data_int: unsigned(7 downto 0);
signal uart_2_clkdiv_4_clk_new: std_logic;
signal uart_2_clkdiv_4_counter: unsigned(7 downto 0);
signal uart_2_clkdiv_5_clk_new: std_logic;
signal uart_2_clkdiv_5_counter: unsigned(2 downto 0);
signal uart_2_shiftreg_2_par_int: unsigned(7 downto 0);
signal uart_2_shiftreg_2_clk_int: std_logic;
signal comms_arbiter_0_delayed_reset1: std_logic;
signal comms_arbiter_0_delayed_reset2: std_logic;
signal comms_arbiter_0_latch_counter: unsigned(7 downto 0);
signal comms_arbiter_0_drdy_turnedon: std_logic;
signal comms_arbiter_0_drdy_old: std_logic;
signal pts_controller_2_amphenol_int: unsigned(49 downto 0);
type t_array_led2_l is array(0 to 9-1) of std_logic;
signal led2_l: t_array_led2_l;
type t_array_biggestblock_l is array(0 to 32-1) of std_logic;
signal biggestblock_l: t_array_biggestblock_l;
type t_array_freq_manager_2_hex_counter_2_to_subtract is array(0 to 9-1) of std_logic;
signal freq_manager_2_hex_counter_2_to_subtract: t_array_freq_manager_2_hex_counter_2_to_subtract;
type t_array_freq_manager_2_hex_counter_2_to_add is array(0 to 9-1) of std_logic;
signal freq_manager_2_hex_counter_2_to_add: t_array_freq_manager_2_hex_counter_2_to_add;
type t_array_freq_manager_2_hex_counter_2_hex_l is array(0 to 9-1) of unsigned(3 downto 0);
signal freq_manager_2_hex_counter_2_hex_l: t_array_freq_manager_2_hex_counter_2_hex_l;
type t_array_freq_manager_2_bussedram_8_mem is array(0 to 128-1) of unsigned(31 downto 0);
signal freq_manager_2_bussedram_8_mem: t_array_freq_manager_2_bussedram_8_mem;
type t_array_freq_manager_2_bussedram_9_mem is array(0 to 128-1) of unsigned(31 downto 0);
signal freq_manager_2_bussedram_9_mem: t_array_freq_manager_2_bussedram_9_mem;
type t_array_freq_manager_2_bussedram_10_mem is array(0 to 128-1) of unsigned(31 downto 0);
signal freq_manager_2_bussedram_10_mem: t_array_freq_manager_2_bussedram_10_mem;
type t_array_freq_manager_2_bussedram_11_mem is array(0 to 128-1) of unsigned(31 downto 0);
signal freq_manager_2_bussedram_11_mem: t_array_freq_manager_2_bussedram_11_mem;
type t_array_uart_2_shiftreg_2_latches is array(0 to 8-1) of std_logic;
signal uart_2_shiftreg_2_latches: t_array_uart_2_shiftreg_2_latches;
type t_array_pts_controller_2_amphenol_l is array(0 to 50-1) of std_logic;
signal pts_controller_2_amphenol_l: t_array_pts_controller_2_amphenol_l;

begin



led2_i(8) <= led2_l(8);
led2_i(7) <= led2_l(7);
led2_i(6) <= led2_l(6);
led2_i(5) <= led2_l(5);
led2_i(4) <= led2_l(4);
led2_i(3) <= led2_l(3);
led2_i(2) <= led2_l(2);
led2_i(1) <= led2_l(1);
led2_i(0) <= led2_l(0);
biggestblock(31) <= biggestblock_l(31);
biggestblock(30) <= biggestblock_l(30);
biggestblock(29) <= biggestblock_l(29);
biggestblock(28) <= biggestblock_l(28);
biggestblock(27) <= biggestblock_l(27);
biggestblock(26) <= biggestblock_l(26);
biggestblock(25) <= biggestblock_l(25);
biggestblock(24) <= biggestblock_l(24);
biggestblock(23) <= biggestblock_l(23);
biggestblock(22) <= biggestblock_l(22);
biggestblock(21) <= biggestblock_l(21);
biggestblock(20) <= biggestblock_l(20);
biggestblock(19) <= biggestblock_l(19);
biggestblock(18) <= biggestblock_l(18);
biggestblock(17) <= biggestblock_l(17);
biggestblock(16) <= biggestblock_l(16);
biggestblock(15) <= biggestblock_l(15);
biggestblock(14) <= biggestblock_l(14);
biggestblock(13) <= biggestblock_l(13);
biggestblock(12) <= biggestblock_l(12);
biggestblock(11) <= biggestblock_l(11);
biggestblock(10) <= biggestblock_l(10);
biggestblock(9) <= biggestblock_l(9);
biggestblock(8) <= biggestblock_l(8);
biggestblock(7) <= biggestblock_l(7);
biggestblock(6) <= biggestblock_l(6);
biggestblock(5) <= biggestblock_l(5);
biggestblock(4) <= biggestblock_l(4);
biggestblock(3) <= biggestblock_l(3);
biggestblock(2) <= biggestblock_l(2);
biggestblock(1) <= biggestblock_l(1);
biggestblock(0) <= biggestblock_l(0);
freq_manager_2_hex_counter_2_hex_int(36-1 downto 32) <= freq_manager_2_hex_counter_2_hex_l(8);
freq_manager_2_hex_counter_2_hex_int(32-1 downto 28) <= freq_manager_2_hex_counter_2_hex_l(7);
freq_manager_2_hex_counter_2_hex_int(28-1 downto 24) <= freq_manager_2_hex_counter_2_hex_l(6);
freq_manager_2_hex_counter_2_hex_int(24-1 downto 20) <= freq_manager_2_hex_counter_2_hex_l(5);
freq_manager_2_hex_counter_2_hex_int(20-1 downto 16) <= freq_manager_2_hex_counter_2_hex_l(4);
freq_manager_2_hex_counter_2_hex_int(16-1 downto 12) <= freq_manager_2_hex_counter_2_hex_l(3);
freq_manager_2_hex_counter_2_hex_int(12-1 downto 8) <= freq_manager_2_hex_counter_2_hex_l(2);
freq_manager_2_hex_counter_2_hex_int(8-1 downto 4) <= freq_manager_2_hex_counter_2_hex_l(1);
freq_manager_2_hex_counter_2_hex_int(4-1 downto 0) <= freq_manager_2_hex_counter_2_hex_l(0);
uart_2_shiftreg_2_par_int(7) <= uart_2_shiftreg_2_latches(0);
uart_2_shiftreg_2_par_int(6) <= uart_2_shiftreg_2_latches(1);
uart_2_shiftreg_2_par_int(5) <= uart_2_shiftreg_2_latches(2);
uart_2_shiftreg_2_par_int(4) <= uart_2_shiftreg_2_latches(3);
uart_2_shiftreg_2_par_int(3) <= uart_2_shiftreg_2_latches(4);
uart_2_shiftreg_2_par_int(2) <= uart_2_shiftreg_2_latches(5);
uart_2_shiftreg_2_par_int(1) <= uart_2_shiftreg_2_latches(6);
uart_2_shiftreg_2_par_int(0) <= uart_2_shiftreg_2_latches(7);
pts_controller_2_amphenol_int(49) <= pts_controller_2_amphenol_l(49);
pts_controller_2_amphenol_int(48) <= pts_controller_2_amphenol_l(48);
pts_controller_2_amphenol_int(47) <= pts_controller_2_amphenol_l(47);
pts_controller_2_amphenol_int(46) <= pts_controller_2_amphenol_l(46);
pts_controller_2_amphenol_int(45) <= pts_controller_2_amphenol_l(45);
pts_controller_2_amphenol_int(44) <= pts_controller_2_amphenol_l(44);
pts_controller_2_amphenol_int(43) <= pts_controller_2_amphenol_l(43);
pts_controller_2_amphenol_int(42) <= pts_controller_2_amphenol_l(42);
pts_controller_2_amphenol_int(41) <= pts_controller_2_amphenol_l(41);
pts_controller_2_amphenol_int(40) <= pts_controller_2_amphenol_l(40);
pts_controller_2_amphenol_int(39) <= pts_controller_2_amphenol_l(39);
pts_controller_2_amphenol_int(38) <= pts_controller_2_amphenol_l(38);
pts_controller_2_amphenol_int(37) <= pts_controller_2_amphenol_l(37);
pts_controller_2_amphenol_int(36) <= pts_controller_2_amphenol_l(36);
pts_controller_2_amphenol_int(35) <= pts_controller_2_amphenol_l(35);
pts_controller_2_amphenol_int(34) <= pts_controller_2_amphenol_l(34);
pts_controller_2_amphenol_int(33) <= pts_controller_2_amphenol_l(33);
pts_controller_2_amphenol_int(32) <= pts_controller_2_amphenol_l(32);
pts_controller_2_amphenol_int(31) <= pts_controller_2_amphenol_l(31);
pts_controller_2_amphenol_int(30) <= pts_controller_2_amphenol_l(30);
pts_controller_2_amphenol_int(29) <= pts_controller_2_amphenol_l(29);
pts_controller_2_amphenol_int(28) <= pts_controller_2_amphenol_l(28);
pts_controller_2_amphenol_int(27) <= pts_controller_2_amphenol_l(27);
pts_controller_2_amphenol_int(26) <= pts_controller_2_amphenol_l(26);
pts_controller_2_amphenol_int(25) <= pts_controller_2_amphenol_l(25);
pts_controller_2_amphenol_int(24) <= pts_controller_2_amphenol_l(24);
pts_controller_2_amphenol_int(23) <= pts_controller_2_amphenol_l(23);
pts_controller_2_amphenol_int(22) <= pts_controller_2_amphenol_l(22);
pts_controller_2_amphenol_int(21) <= pts_controller_2_amphenol_l(21);
pts_controller_2_amphenol_int(20) <= pts_controller_2_amphenol_l(20);
pts_controller_2_amphenol_int(19) <= pts_controller_2_amphenol_l(19);
pts_controller_2_amphenol_int(18) <= pts_controller_2_amphenol_l(18);
pts_controller_2_amphenol_int(17) <= pts_controller_2_amphenol_l(17);
pts_controller_2_amphenol_int(16) <= pts_controller_2_amphenol_l(16);
pts_controller_2_amphenol_int(15) <= pts_controller_2_amphenol_l(15);
pts_controller_2_amphenol_int(14) <= pts_controller_2_amphenol_l(14);
pts_controller_2_amphenol_int(13) <= pts_controller_2_amphenol_l(13);
pts_controller_2_amphenol_int(12) <= pts_controller_2_amphenol_l(12);
pts_controller_2_amphenol_int(11) <= pts_controller_2_amphenol_l(11);
pts_controller_2_amphenol_int(10) <= pts_controller_2_amphenol_l(10);
pts_controller_2_amphenol_int(9) <= pts_controller_2_amphenol_l(9);
pts_controller_2_amphenol_int(8) <= pts_controller_2_amphenol_l(8);
pts_controller_2_amphenol_int(7) <= pts_controller_2_amphenol_l(7);
pts_controller_2_amphenol_int(6) <= pts_controller_2_amphenol_l(6);
pts_controller_2_amphenol_int(5) <= pts_controller_2_amphenol_l(5);
pts_controller_2_amphenol_int(4) <= pts_controller_2_amphenol_l(4);
pts_controller_2_amphenol_int(3) <= pts_controller_2_amphenol_l(3);
pts_controller_2_amphenol_int(2) <= pts_controller_2_amphenol_l(2);
pts_controller_2_amphenol_int(1) <= pts_controller_2_amphenol_l(1);
pts_controller_2_amphenol_int(0) <= pts_controller_2_amphenol_l(0);

-- Allow for time_step == 0 
WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_WIRING: process (freq_manager_2_hex_counter_2_time_step, clk, freq_manager_2_hex_counter_2_clk_p_time) is
begin
    if ((freq_manager_2_hex_counter_2_time_step = 0) or (freq_manager_2_hex_counter_2_time_step = 1)) then
        freq_manager_2_hex_counter_2_int_clk <= clk;
    else
        freq_manager_2_hex_counter_2_int_clk <= freq_manager_2_hex_counter_2_clk_p_time;
    end if;
end process WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_WIRING;

-- This is the hexadecimal and binary counter.
-- It adds or subtracts only if (add xor sub) is True, to allow for the carry logic
-- a new bit of logic is required, namely addlogic, and sublogic. They give out 
-- lists of vectors (or integer masks). These are used in the logic below. And work 
-- out most of the stuff. One extra if statement is needed to increment the desired 
-- byte.
WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_COUNTER: process (freq_manager_2_hex_counter_2_int_clk) is
begin
    if falling_edge(freq_manager_2_hex_counter_2_int_clk) then
        if (freq_man_reset = '1') then
            freq_manager_2_hex_counter_2_bin_int <= to_unsigned(00000000, 30);
            freq_manager_2_hex_counter_2_hex_l(0) <= to_unsigned(0, 4);
            freq_manager_2_hex_counter_2_hex_l(1) <= to_unsigned(0, 4);
            freq_manager_2_hex_counter_2_hex_l(2) <= to_unsigned(0, 4);
            freq_manager_2_hex_counter_2_hex_l(3) <= to_unsigned(0, 4);
            freq_manager_2_hex_counter_2_hex_l(4) <= to_unsigned(0, 4);
            freq_manager_2_hex_counter_2_hex_l(5) <= to_unsigned(0, 4);
            freq_manager_2_hex_counter_2_hex_l(6) <= to_unsigned(0, 4);
            freq_manager_2_hex_counter_2_hex_l(7) <= to_unsigned(0, 4);
            freq_manager_2_hex_counter_2_hex_l(8) <= to_unsigned(0, 4);
        else
            if ((signed(resize(freq_manager_2_hex_counter_2_bin_int, 31) + freq_manager_2_hex_counter_2_rom_4_dout) > ((10 ** 9) - 1)) and ((freq_manager_2_add = '1') and (freq_manager_2_sub = '0'))) then
                freq_manager_2_hex_counter_2_bin_int <= resize(unsigned(signed(resize(freq_manager_2_hex_counter_2_bin_int, 31) + freq_manager_2_hex_counter_2_rom_4_dout) - (10 ** 9)), 30);
            elsif ((freq_manager_2_hex_counter_2_bin_int < freq_manager_2_hex_counter_2_rom_4_dout) and ((freq_manager_2_sub = '1') and (freq_manager_2_add = '0'))) then
                freq_manager_2_hex_counter_2_bin_int <= resize(unsigned((signed(resize(freq_manager_2_hex_counter_2_bin_int, 31)) - signed(resize(freq_manager_2_hex_counter_2_rom_4_dout, 31))) + (10 ** 9)), 30);
            else
                if ((freq_manager_2_add = '1') and (freq_manager_2_sub = '0')) then
                    freq_manager_2_hex_counter_2_bin_int <= (freq_manager_2_hex_counter_2_bin_int + freq_manager_2_hex_counter_2_rom_4_dout);
                elsif ((freq_manager_2_sub = '1') and (freq_manager_2_add = '0')) then
                    freq_manager_2_hex_counter_2_bin_int <= (freq_manager_2_hex_counter_2_bin_int - freq_manager_2_hex_counter_2_rom_4_dout);
                else
                    freq_manager_2_hex_counter_2_bin_int <= freq_manager_2_hex_counter_2_bin_int;
                end if;
            end if;
            if ((freq_manager_2_add = '1') and (not bool(freq_manager_2_sub))) then
                for digit in 0 to 9-1 loop
                    if (digit > signed(resize(freq_manager_2_dig_incr, 5))) then
                        if bool(freq_manager_2_hex_counter_2_to_add(digit)) then
                            if (freq_manager_2_hex_counter_2_hex_l(digit) /= 9) then
                                freq_manager_2_hex_counter_2_hex_l(digit) <= (freq_manager_2_hex_counter_2_hex_l(digit) + 1);
                            else
                                freq_manager_2_hex_counter_2_hex_l(digit) <= to_unsigned(0, 4);
                            end if;
                        else
                            freq_manager_2_hex_counter_2_hex_l(digit) <= freq_manager_2_hex_counter_2_hex_l(digit);
                        end if;
                    elsif (digit = signed(resize(freq_manager_2_dig_incr, 5))) then
                        if (freq_manager_2_hex_counter_2_hex_l(to_integer(freq_manager_2_dig_incr)) /= 9) then
                            freq_manager_2_hex_counter_2_hex_l(to_integer(freq_manager_2_dig_incr)) <= (freq_manager_2_hex_counter_2_hex_l(to_integer(freq_manager_2_dig_incr)) + 1);
                        else
                            freq_manager_2_hex_counter_2_hex_l(to_integer(freq_manager_2_dig_incr)) <= to_unsigned(0, 4);
                        end if;
                    end if;
                end loop;
            elsif ((freq_manager_2_sub = '1') and (not bool(freq_manager_2_add))) then
                for digit in 0 to 9-1 loop
                    if (digit > signed(resize(freq_manager_2_dig_incr, 5))) then
                        if bool(freq_manager_2_hex_counter_2_to_subtract(digit)) then
                            if (freq_manager_2_hex_counter_2_hex_l(digit) /= 0) then
                                freq_manager_2_hex_counter_2_hex_l(digit) <= (freq_manager_2_hex_counter_2_hex_l(digit) - 1);
                            else
                                freq_manager_2_hex_counter_2_hex_l(digit) <= to_unsigned(9, 4);
                            end if;
                        else
                            freq_manager_2_hex_counter_2_hex_l(digit) <= freq_manager_2_hex_counter_2_hex_l(digit);
                        end if;
                    elsif (digit = signed(resize(freq_manager_2_dig_incr, 5))) then
                        if (freq_manager_2_hex_counter_2_hex_l(to_integer(freq_manager_2_dig_incr)) /= 0) then
                            freq_manager_2_hex_counter_2_hex_l(to_integer(freq_manager_2_dig_incr)) <= (freq_manager_2_hex_counter_2_hex_l(to_integer(freq_manager_2_dig_incr)) - 1);
                        else
                            freq_manager_2_hex_counter_2_hex_l(to_integer(freq_manager_2_dig_incr)) <= to_unsigned(9, 4);
                        end if;
                    end if;
                end loop;
            else
                for digit in 0 to 9-1 loop
                    freq_manager_2_hex_counter_2_hex_l(digit) <= freq_manager_2_hex_counter_2_hex_l(digit);
                end loop;
            end if;
        end if;
    end if;
end process WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_COUNTER;


WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ROM_4_READ: process (freq_manager_2_dig_incr) is
begin
    case to_integer(freq_manager_2_dig_incr) is
        when 0 => freq_manager_2_hex_counter_2_rom_4_dout <= "000000000000000000000000000001";
        when 1 => freq_manager_2_hex_counter_2_rom_4_dout <= "000000000000000000000000001010";
        when 2 => freq_manager_2_hex_counter_2_rom_4_dout <= "000000000000000000000001100100";
        when 3 => freq_manager_2_hex_counter_2_rom_4_dout <= "000000000000000000001111101000";
        when 4 => freq_manager_2_hex_counter_2_rom_4_dout <= "000000000000000010011100010000";
        when 5 => freq_manager_2_hex_counter_2_rom_4_dout <= "000000000000011000011010100000";
        when 6 => freq_manager_2_hex_counter_2_rom_4_dout <= "000000000011110100001001000000";
        when 7 => freq_manager_2_hex_counter_2_rom_4_dout <= "000000100110001001011010000000";
        when others => freq_manager_2_hex_counter_2_rom_4_dout <= "000101111101011110000100000000";
    end case;
end process WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ROM_4_READ;

-- Drives a pulse with period,
-- time_step. 
WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_CLK_DRIVER: process (clk) is
begin
    if rising_edge(clk) then
        if (freq_man_reset = '1') then
            freq_manager_2_hex_counter_2_clk_p_time <= '0';
            freq_manager_2_hex_counter_2_clk_counter <= to_unsigned(00000000, 32);
        else
            if (freq_manager_2_hex_counter_2_clk_counter = 0) then
                freq_manager_2_hex_counter_2_clk_p_time <= '1';
                freq_manager_2_hex_counter_2_clk_counter <= (freq_manager_2_hex_counter_2_clk_counter + 1);
            elsif (signed(resize(freq_manager_2_hex_counter_2_clk_counter, 33)) >= (signed(resize(freq_manager_2_hex_counter_2_time_step, 33)) - 1)) then
                freq_manager_2_hex_counter_2_clk_p_time <= '0';
                freq_manager_2_hex_counter_2_clk_counter <= to_unsigned(0, 32);
            else
                freq_manager_2_hex_counter_2_clk_p_time <= '0';
                freq_manager_2_hex_counter_2_clk_counter <= (freq_manager_2_hex_counter_2_clk_counter + 1);
            end if;
        end if;
    end if;
end process WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_CLK_DRIVER;

-- Latch values on positive clock edge 
WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_LATCH_COUNTS: process (clk) is
begin
    if rising_edge(clk) then
        if (freq_man_reset = '1') then
            freq_manager_2_hex_count <= to_unsigned(000000000, 36);
            freq_manager_2_bin_count <= to_signed(00000000, 31);
        else
            freq_manager_2_hex_count <= freq_manager_2_hex_counter_2_hex_int;
            freq_manager_2_bin_count <= signed(resize(freq_manager_2_hex_counter_2_bin_int, 31));
        end if;
    end if;
end process WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_LATCH_COUNTS;

-- This module determines whether or not to add/sub certain bits,
-- in the case of carry over. First we make sure we don't add/sub all
-- the bits lower than increment, then we set the increment bit to add/sub,
-- and lastly we perform the logic neccessary to determine if bits greater
-- than dig_incr need to be added
-- 
-- It's sensitivity list is long, this is neccessary as to allow the logic 
-- to update to_add when any part of to_add changes, as is the case
-- when performing carry logic.
WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ADDSUBLOGIC_0_LOGIC_0_0_INNER: process (freq_manager_2_dig_incr, freq_manager_2_add, freq_manager_2_sub) is
    variable digit: std_logic;
begin
    digit := '0';
    if (digit = freq_manager_2_dig_incr(0)) then
        freq_manager_2_hex_counter_2_to_add(to_integer(digit)) <= '1';
        freq_manager_2_hex_counter_2_to_subtract(to_integer(digit)) <= '1';
    else
        freq_manager_2_hex_counter_2_to_add(to_integer(digit)) <= '0';
        freq_manager_2_hex_counter_2_to_subtract(to_integer(digit)) <= '0';
    end if;
end process WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ADDSUBLOGIC_0_LOGIC_0_0_INNER;


WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ADDSUBLOGIC_0_LOGIC_1_0_INNER: process (freq_manager_2_dig_incr, freq_manager_2_hex_counter_2_hex_l(0), freq_manager_2_hex_counter_2_to_add(0), freq_manager_2_hex_counter_2_to_subtract(0), freq_manager_2_add, freq_manager_2_sub) is
begin
    if (1 < freq_manager_2_dig_incr) then
        freq_manager_2_hex_counter_2_to_add(1) <= '0';
        freq_manager_2_hex_counter_2_to_subtract(1) <= '0';
    elsif (1 = freq_manager_2_dig_incr) then
        freq_manager_2_hex_counter_2_to_add(1) <= '1';
        freq_manager_2_hex_counter_2_to_subtract(1) <= '1';
    else
        freq_manager_2_hex_counter_2_to_add(1) <= stdl((freq_manager_2_hex_counter_2_hex_l((1 - 1)) = 9) and bool(freq_manager_2_hex_counter_2_to_add((1 - 1))));
        freq_manager_2_hex_counter_2_to_subtract(1) <= stdl((freq_manager_2_hex_counter_2_hex_l((1 - 1)) = 0) and bool(freq_manager_2_hex_counter_2_to_subtract((1 - 1))));
    end if;
end process WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ADDSUBLOGIC_0_LOGIC_1_0_INNER;


WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ADDSUBLOGIC_0_LOGIC_2_0_INNER: process (freq_manager_2_dig_incr, freq_manager_2_hex_counter_2_hex_l(1), freq_manager_2_hex_counter_2_to_add(1), freq_manager_2_hex_counter_2_to_subtract(1), freq_manager_2_add, freq_manager_2_sub) is
begin
    if (2 < freq_manager_2_dig_incr) then
        freq_manager_2_hex_counter_2_to_add(2) <= '0';
        freq_manager_2_hex_counter_2_to_subtract(2) <= '0';
    elsif (2 = freq_manager_2_dig_incr) then
        freq_manager_2_hex_counter_2_to_add(2) <= '1';
        freq_manager_2_hex_counter_2_to_subtract(2) <= '1';
    else
        freq_manager_2_hex_counter_2_to_add(2) <= stdl((freq_manager_2_hex_counter_2_hex_l((2 - 1)) = 9) and bool(freq_manager_2_hex_counter_2_to_add((2 - 1))));
        freq_manager_2_hex_counter_2_to_subtract(2) <= stdl((freq_manager_2_hex_counter_2_hex_l((2 - 1)) = 0) and bool(freq_manager_2_hex_counter_2_to_subtract((2 - 1))));
    end if;
end process WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ADDSUBLOGIC_0_LOGIC_2_0_INNER;


WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ADDSUBLOGIC_0_LOGIC_3_0_INNER: process (freq_manager_2_dig_incr, freq_manager_2_hex_counter_2_hex_l(2), freq_manager_2_hex_counter_2_to_add(2), freq_manager_2_hex_counter_2_to_subtract(2), freq_manager_2_add, freq_manager_2_sub) is
begin
    if (3 < freq_manager_2_dig_incr) then
        freq_manager_2_hex_counter_2_to_add(3) <= '0';
        freq_manager_2_hex_counter_2_to_subtract(3) <= '0';
    elsif (3 = freq_manager_2_dig_incr) then
        freq_manager_2_hex_counter_2_to_add(3) <= '1';
        freq_manager_2_hex_counter_2_to_subtract(3) <= '1';
    else
        freq_manager_2_hex_counter_2_to_add(3) <= stdl((freq_manager_2_hex_counter_2_hex_l((3 - 1)) = 9) and bool(freq_manager_2_hex_counter_2_to_add((3 - 1))));
        freq_manager_2_hex_counter_2_to_subtract(3) <= stdl((freq_manager_2_hex_counter_2_hex_l((3 - 1)) = 0) and bool(freq_manager_2_hex_counter_2_to_subtract((3 - 1))));
    end if;
end process WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ADDSUBLOGIC_0_LOGIC_3_0_INNER;


WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ADDSUBLOGIC_0_LOGIC_4_0_INNER: process (freq_manager_2_dig_incr, freq_manager_2_hex_counter_2_hex_l(3), freq_manager_2_hex_counter_2_to_add(3), freq_manager_2_hex_counter_2_to_subtract(3), freq_manager_2_add, freq_manager_2_sub) is
begin
    if (4 < freq_manager_2_dig_incr) then
        freq_manager_2_hex_counter_2_to_add(4) <= '0';
        freq_manager_2_hex_counter_2_to_subtract(4) <= '0';
    elsif (4 = freq_manager_2_dig_incr) then
        freq_manager_2_hex_counter_2_to_add(4) <= '1';
        freq_manager_2_hex_counter_2_to_subtract(4) <= '1';
    else
        freq_manager_2_hex_counter_2_to_add(4) <= stdl((freq_manager_2_hex_counter_2_hex_l((4 - 1)) = 9) and bool(freq_manager_2_hex_counter_2_to_add((4 - 1))));
        freq_manager_2_hex_counter_2_to_subtract(4) <= stdl((freq_manager_2_hex_counter_2_hex_l((4 - 1)) = 0) and bool(freq_manager_2_hex_counter_2_to_subtract((4 - 1))));
    end if;
end process WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ADDSUBLOGIC_0_LOGIC_4_0_INNER;


WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ADDSUBLOGIC_0_LOGIC_5_0_INNER: process (freq_manager_2_dig_incr, freq_manager_2_hex_counter_2_hex_l(4), freq_manager_2_hex_counter_2_to_add(4), freq_manager_2_hex_counter_2_to_subtract(4), freq_manager_2_add, freq_manager_2_sub) is
begin
    if (5 < freq_manager_2_dig_incr) then
        freq_manager_2_hex_counter_2_to_add(5) <= '0';
        freq_manager_2_hex_counter_2_to_subtract(5) <= '0';
    elsif (5 = freq_manager_2_dig_incr) then
        freq_manager_2_hex_counter_2_to_add(5) <= '1';
        freq_manager_2_hex_counter_2_to_subtract(5) <= '1';
    else
        freq_manager_2_hex_counter_2_to_add(5) <= stdl((freq_manager_2_hex_counter_2_hex_l((5 - 1)) = 9) and bool(freq_manager_2_hex_counter_2_to_add((5 - 1))));
        freq_manager_2_hex_counter_2_to_subtract(5) <= stdl((freq_manager_2_hex_counter_2_hex_l((5 - 1)) = 0) and bool(freq_manager_2_hex_counter_2_to_subtract((5 - 1))));
    end if;
end process WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ADDSUBLOGIC_0_LOGIC_5_0_INNER;


WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ADDSUBLOGIC_0_LOGIC_6_0_INNER: process (freq_manager_2_dig_incr, freq_manager_2_hex_counter_2_hex_l(5), freq_manager_2_hex_counter_2_to_add(5), freq_manager_2_hex_counter_2_to_subtract(5), freq_manager_2_add, freq_manager_2_sub) is
begin
    if (6 < freq_manager_2_dig_incr) then
        freq_manager_2_hex_counter_2_to_add(6) <= '0';
        freq_manager_2_hex_counter_2_to_subtract(6) <= '0';
    elsif (6 = freq_manager_2_dig_incr) then
        freq_manager_2_hex_counter_2_to_add(6) <= '1';
        freq_manager_2_hex_counter_2_to_subtract(6) <= '1';
    else
        freq_manager_2_hex_counter_2_to_add(6) <= stdl((freq_manager_2_hex_counter_2_hex_l((6 - 1)) = 9) and bool(freq_manager_2_hex_counter_2_to_add((6 - 1))));
        freq_manager_2_hex_counter_2_to_subtract(6) <= stdl((freq_manager_2_hex_counter_2_hex_l((6 - 1)) = 0) and bool(freq_manager_2_hex_counter_2_to_subtract((6 - 1))));
    end if;
end process WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ADDSUBLOGIC_0_LOGIC_6_0_INNER;


WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ADDSUBLOGIC_0_LOGIC_7_0_INNER: process (freq_manager_2_dig_incr, freq_manager_2_hex_counter_2_hex_l(6), freq_manager_2_hex_counter_2_to_add(6), freq_manager_2_hex_counter_2_to_subtract(6), freq_manager_2_add, freq_manager_2_sub) is
begin
    if (7 < freq_manager_2_dig_incr) then
        freq_manager_2_hex_counter_2_to_add(7) <= '0';
        freq_manager_2_hex_counter_2_to_subtract(7) <= '0';
    elsif (7 = freq_manager_2_dig_incr) then
        freq_manager_2_hex_counter_2_to_add(7) <= '1';
        freq_manager_2_hex_counter_2_to_subtract(7) <= '1';
    else
        freq_manager_2_hex_counter_2_to_add(7) <= stdl((freq_manager_2_hex_counter_2_hex_l((7 - 1)) = 9) and bool(freq_manager_2_hex_counter_2_to_add((7 - 1))));
        freq_manager_2_hex_counter_2_to_subtract(7) <= stdl((freq_manager_2_hex_counter_2_hex_l((7 - 1)) = 0) and bool(freq_manager_2_hex_counter_2_to_subtract((7 - 1))));
    end if;
end process WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ADDSUBLOGIC_0_LOGIC_7_0_INNER;


WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ADDSUBLOGIC_0_LOGIC_8_0_INNER: process (freq_manager_2_dig_incr, freq_manager_2_hex_counter_2_hex_l(7), freq_manager_2_hex_counter_2_to_add(7), freq_manager_2_hex_counter_2_to_subtract(7), freq_manager_2_add, freq_manager_2_sub) is
begin
    if (8 < freq_manager_2_dig_incr) then
        freq_manager_2_hex_counter_2_to_add(8) <= '0';
        freq_manager_2_hex_counter_2_to_subtract(8) <= '0';
    elsif (8 = freq_manager_2_dig_incr) then
        freq_manager_2_hex_counter_2_to_add(8) <= '1';
        freq_manager_2_hex_counter_2_to_subtract(8) <= '1';
    else
        freq_manager_2_hex_counter_2_to_add(8) <= stdl((freq_manager_2_hex_counter_2_hex_l((8 - 1)) = 9) and bool(freq_manager_2_hex_counter_2_to_add((8 - 1))));
        freq_manager_2_hex_counter_2_to_subtract(8) <= stdl((freq_manager_2_hex_counter_2_hex_l((8 - 1)) = 0) and bool(freq_manager_2_hex_counter_2_to_subtract((8 - 1))));
    end if;
end process WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_ADDSUBLOGIC_0_LOGIC_8_0_INNER;


WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_SET_INIT: process is
begin
    wait for 1 * 1 ns;
    for i in 0 to 9-1 loop
        freq_manager_2_hex_counter_2_to_subtract(i) <= '0';
        freq_manager_2_hex_counter_2_to_add(i) <= '0';
    end loop;
    wait;
end process WITH_UART_FREQ_MANAGER_2_HEX_COUNTER_2_SET_INIT;

-- Connect the ram fstep with 
-- a value we subtract for allowing for convergence
WITH_UART_FREQ_MANAGER_2_DIGIT_TO_INCREMENT: process (freq_manager_2_fstep_rambus_dout, freq_manager_2_dig_incr_offset) is
begin
    if (freq_manager_2_fstep_rambus_dout >= freq_manager_2_dig_incr_offset) then
        freq_manager_2_dig_incr <= resize(freq_manager_2_fstep_rambus_dout - freq_manager_2_dig_incr_offset, 4);
    else
        freq_manager_2_dig_incr <= to_unsigned(0, 4);
    end if;
end process WITH_UART_FREQ_MANAGER_2_DIGIT_TO_INCREMENT;



freq_manager_2_freq_rambus_raddr <= freq_manager_2_sched_addr;
freq_manager_2_fstep_rambus_raddr <= freq_manager_2_sched_addr;
freq_manager_2_tstep_rambus_raddr <= freq_manager_2_sched_addr;
freq_manager_2_holdt_rambus_raddr <= freq_manager_2_sched_addr;


WITH_UART_FREQ_MANAGER_2_SCHEDULE_STEPPER: process (clk) is
begin
    if falling_edge(clk) then
        if (freq_man_reset = '1') then
            freq_manager_2_sched_addr <= to_unsigned(00, 7);
            freq_manager_2_dig_incr_offset <= to_unsigned(0, 4);
            freq_manager_2_add <= '0';
            freq_manager_2_sub <= '0';
            freq_manager_2_hold_counter <= to_unsigned(00000000, 32);
            freq_manager_2_state <= START;
        else
            case freq_manager_2_state is
                when START =>
                    freq_manager_2_sched_addr <= to_unsigned(0, 7);
                    freq_manager_2_dig_incr_offset <= to_unsigned(0, 4);
                    freq_manager_2_add <= '0';
                    freq_manager_2_sub <= '0';
                    freq_manager_2_hold_counter <= to_unsigned(0, 32);
                    if (trigger_mask = '1') then
                        freq_manager_2_state <= INCREMENTING;
                    else
                        freq_manager_2_state <= START;
                    end if;
                when INCREMENTING =>
                    if (freq_manager_2_bin_count < signed(resize(freq_manager_2_freq_rambus_dout, 33))) then
                        freq_manager_2_add <= '1';
                        freq_manager_2_sub <= '0';
                        if ((freq_manager_2_sub = '1') and (freq_manager_2_dig_incr_offset /= 9)) then
                            freq_manager_2_dig_incr_offset <= (freq_manager_2_dig_incr_offset + 1);
                        else
                            freq_manager_2_dig_incr_offset <= freq_manager_2_dig_incr_offset;
                        end if;
                    elsif (freq_manager_2_bin_count > signed(resize(freq_manager_2_freq_rambus_dout, 33))) then
                        freq_manager_2_add <= '0';
                        freq_manager_2_sub <= '1';
                        if ((freq_manager_2_add = '1') and (freq_manager_2_dig_incr_offset /= 9)) then
                            freq_manager_2_dig_incr_offset <= (freq_manager_2_dig_incr_offset + 1);
                        else
                            freq_manager_2_dig_incr_offset <= freq_manager_2_dig_incr_offset;
                        end if;
                    else
                        freq_manager_2_add <= '0';
                        freq_manager_2_sub <= '0';
                        freq_manager_2_state <= HOLDING;
                    end if;
                when HOLDING =>
                    if (freq_manager_2_hold_counter >= freq_manager_2_holdt_rambus_dout) then
                        freq_manager_2_sched_addr <= (freq_manager_2_sched_addr + 1);
                        freq_manager_2_hold_counter <= to_unsigned(0, 32);
                        if (signed(resize(freq_manager_2_sched_addr, 8)) = (signed(resize(sched_len, 8)) - 1)) then
                            freq_manager_2_state <= FINISHED;
                        else
                            freq_manager_2_state <= INCREMENTING;
                        end if;
                    else
                        freq_manager_2_hold_counter <= (freq_manager_2_hold_counter + 1);
                    end if;
                when others =>
                    freq_manager_2_sched_addr <= to_unsigned(0, 7);
                    freq_manager_2_dig_incr_offset <= to_unsigned(0, 4);
                    freq_manager_2_add <= '0';
                    freq_manager_2_sub <= '0';
                    freq_manager_2_hold_counter <= to_unsigned(0, 32);
                    freq_manager_2_state <= FINISHED;
                    if (trigger_mask = '1') then
                        freq_manager_2_state <= START;
                    end if;
            end case;
        end if;
    end if;
end process WITH_UART_FREQ_MANAGER_2_SCHEDULE_STEPPER;


WITH_UART_FREQ_MANAGER_2_BUSSEDRAM_8_WRITE: process (freq_rambus_clk) is
begin
    if rising_edge(freq_rambus_clk) then
        if bool(freq_manager_2_bussedram_8_rambus_we) then
            freq_manager_2_bussedram_8_mem(to_integer(freq_rambus_waddr)) <= freq_rambus_din;
        end if;
    end if;
end process WITH_UART_FREQ_MANAGER_2_BUSSEDRAM_8_WRITE;



freq_manager_2_freq_rambus_dout <= freq_manager_2_bussedram_8_mem(to_integer(freq_manager_2_freq_rambus_raddr));


WITH_UART_FREQ_MANAGER_2_BUSSEDRAM_9_WRITE: process (fstep_rambus_clk) is
begin
    if rising_edge(fstep_rambus_clk) then
        if bool(freq_manager_2_bussedram_9_rambus_we) then
            freq_manager_2_bussedram_9_mem(to_integer(fstep_rambus_waddr)) <= fstep_rambus_din;
        end if;
    end if;
end process WITH_UART_FREQ_MANAGER_2_BUSSEDRAM_9_WRITE;



freq_manager_2_fstep_rambus_dout <= freq_manager_2_bussedram_9_mem(to_integer(freq_manager_2_fstep_rambus_raddr));


WITH_UART_FREQ_MANAGER_2_BUSSEDRAM_10_WRITE: process (tstep_rambus_clk) is
begin
    if rising_edge(tstep_rambus_clk) then
        if bool(freq_manager_2_bussedram_10_rambus_we) then
            freq_manager_2_bussedram_10_mem(to_integer(tstep_rambus_waddr)) <= tstep_rambus_din;
        end if;
    end if;
end process WITH_UART_FREQ_MANAGER_2_BUSSEDRAM_10_WRITE;



freq_manager_2_hex_counter_2_time_step <= freq_manager_2_bussedram_10_mem(to_integer(freq_manager_2_tstep_rambus_raddr));


WITH_UART_FREQ_MANAGER_2_BUSSEDRAM_11_WRITE: process (hold_rambus_clk) is
begin
    if rising_edge(hold_rambus_clk) then
        if bool(freq_manager_2_bussedram_11_rambus_we) then
            freq_manager_2_bussedram_11_mem(to_integer(hold_rambus_waddr)) <= hold_rambus_din;
        end if;
    end if;
end process WITH_UART_FREQ_MANAGER_2_BUSSEDRAM_11_WRITE;



freq_manager_2_holdt_rambus_dout <= freq_manager_2_bussedram_11_mem(to_integer(freq_manager_2_holdt_rambus_raddr));


WITH_UART_FREQ_MANAGER_2_ROM_5_READ: process (freq_manager_2_dig_incr) is
begin
    case to_integer(freq_manager_2_dig_incr) is
        when 0 => freq_manager_2_rom_5_dout <= "000000000000000000000000000001";
        when 1 => freq_manager_2_rom_5_dout <= "000000000000000000000000001010";
        when 2 => freq_manager_2_rom_5_dout <= "000000000000000000000001100100";
        when 3 => freq_manager_2_rom_5_dout <= "000000000000000000001111101000";
        when 4 => freq_manager_2_rom_5_dout <= "000000000000000010011100010000";
        when 5 => freq_manager_2_rom_5_dout <= "000000000000011000011010100000";
        when 6 => freq_manager_2_rom_5_dout <= "000000000011110100001001000000";
        when 7 => freq_manager_2_rom_5_dout <= "000000100110001001011010000000";
        when others => freq_manager_2_rom_5_dout <= "000101111101011110000100000000";
    end case;
end process WITH_UART_FREQ_MANAGER_2_ROM_5_READ;



hex_freq <= freq_manager_2_hex_count;


WITH_UART_UART_2_CHECKFORENDBITS: process (uart_2_baud) is
begin
    if rising_edge(uart_2_baud) then
        if (reset = '0') then
            uart_2_bauds_held_down <= to_unsigned(0, 3);
            uart_2_started <= '0';
        else
            if (not bool(uart_2_started)) then
                if (fpga_rx = '0') then
                    if (uart_2_bauds_held_down /= 4) then
                        uart_2_bauds_held_down <= (uart_2_bauds_held_down + 1);
                        uart_2_latch_en <= '0';
                    else
                        uart_2_bauds_held_down <= to_unsigned(0, 3);
                        uart_2_started <= '1';
                        uart_2_latch_en <= '1';
                    end if;
                else
                    uart_2_latch_en <= '0';
                    uart_2_bauds_held_down <= to_unsigned(0, 3);
                end if;
            else
                if (uart_2_bits_received = 8) then
                    uart_2_latch_en <= '0';
                else
                    uart_2_latch_en <= '1';
                end if;
                if ((fpga_rx = '1') and (uart_2_bits_received = 8)) then
                    if (signed(resize(uart_2_bauds_held_down, 4)) /= (4 + ((1 - 1) * 8))) then
                        uart_2_bauds_held_down <= (uart_2_bauds_held_down + 1);
                    else
                        uart_2_bauds_held_down <= to_unsigned(0, 3);
                        uart_2_started <= '0';
                    end if;
                elsif (uart_2_bits_received = 8) then
                    uart_2_bauds_held_down <= to_unsigned(0, 3);
                end if;
            end if;
        end if;
    end if;
end process WITH_UART_UART_2_CHECKFORENDBITS;



uart_2_slowbaud_rst <= stdl((not bool(uart_2_started)));
uart_2_drdy_int <= stdl((not bool(uart_2_started)));


WITH_UART_UART_2_COUNTTHEMBITS: process (uart_2_slowbaud, uart_2_slowbaud_rst) is
begin
    if (uart_2_slowbaud_rst = '1') then
        uart_2_bits_received <= to_unsigned(00, 5);
    elsif rising_edge(uart_2_slowbaud) then
        if bool(uart_2_latch_en) then
            uart_2_bits_received <= (uart_2_bits_received + 1);
        end if;
    end if;
end process WITH_UART_UART_2_COUNTTHEMBITS;


WITH_UART_UART_2_DELAY_DRDY: process (clk) is
begin
    if rising_edge(clk) then
        if (reset = '0') then
            uart_2_drdy1 <= '1';
            uart_2_drdy2 <= '1';
        else
            uart_2_drdy1 <= uart_2_drdy_int;
            uart_2_drdy2 <= uart_2_drdy1;
        end if;
    end if;
end process WITH_UART_UART_2_DELAY_DRDY;


WITH_UART_UART_2_LATCH_ON_READY: process (uart_2_drdy_int) is
begin
    if rising_edge(uart_2_drdy_int) then
        if (reset = '0') then
            rx_data <= to_unsigned(00, 8);
        else
            rx_data <= uart_2_rx_data_int;
        end if;
    end if;
end process WITH_UART_UART_2_LATCH_ON_READY;


WITH_UART_UART_2_CLKDIV_4_CLOCKDIVIDER: process (clk) is
begin
    if rising_edge(clk) then
        if ((signed(resize(uart_2_clkdiv_4_counter, 9)) = (156 - 1)) or (signed(resize(uart_2_clkdiv_4_counter, 9)) = (156 / 2))) then
            uart_2_clkdiv_4_clk_new <= stdl((not bool(uart_2_clkdiv_4_clk_new)));
        end if;
        if (signed(resize(uart_2_clkdiv_4_counter, 9)) = (156 - 1)) then
            uart_2_clkdiv_4_counter <= to_unsigned(0, 8);
        else
            uart_2_clkdiv_4_counter <= (uart_2_clkdiv_4_counter + 1);
        end if;
    end if;
end process WITH_UART_UART_2_CLKDIV_4_CLOCKDIVIDER;



uart_2_baud <= uart_2_clkdiv_4_clk_new;


WITH_UART_UART_2_CLKDIV_5_CLOCKDIVIDER: process (uart_2_baud, uart_2_slowbaud_rst) is
begin
    if (uart_2_slowbaud_rst = '1') then
        uart_2_clkdiv_5_clk_new <= '0';
        uart_2_clkdiv_5_counter <= to_unsigned(0, 3);
    elsif rising_edge(uart_2_baud) then
        if ((signed(resize(uart_2_clkdiv_5_counter, 4)) = (8 - 1)) or (signed(resize(uart_2_clkdiv_5_counter, 4)) = (8 / 2))) then
            uart_2_clkdiv_5_clk_new <= stdl((not bool(uart_2_clkdiv_5_clk_new)));
        end if;
        if (signed(resize(uart_2_clkdiv_5_counter, 4)) = (8 - 1)) then
            uart_2_clkdiv_5_counter <= to_unsigned(0, 3);
        else
            uart_2_clkdiv_5_counter <= (uart_2_clkdiv_5_counter + 1);
        end if;
    end if;
end process WITH_UART_UART_2_CLKDIV_5_CLOCKDIVIDER;



uart_2_slowbaud <= uart_2_clkdiv_5_clk_new;


WITH_UART_UART_2_SHIFTREG_2_WIRING: process (uart_2_slowbaud, uart_2_latch_en) is
begin
    for i in 0 to 8-1 loop
        uart_2_shiftreg_2_clk_int <= stdl(bool(uart_2_slowbaud) and bool(uart_2_latch_en));
    end loop;
end process WITH_UART_UART_2_SHIFTREG_2_WIRING;


WITH_UART_UART_2_SHIFTREG_2_LATCHER: process (uart_2_shiftreg_2_clk_int) is
    variable loadval: signed(-1 downto 0);
begin
    if rising_edge(uart_2_shiftreg_2_clk_int) then
        if ('0' = '0') then
            uart_2_shiftreg_2_latches(0) <= fpga_rx;
            for i in 1 to 8-1 loop
                uart_2_shiftreg_2_latches(i) <= uart_2_shiftreg_2_latches((i - 1));
            end loop;
        else
            for i in 0 to 8-1 loop
                uart_2_shiftreg_2_latches(i) <= loadval(i);
            end loop;
        end if;
    end if;
end process WITH_UART_UART_2_SHIFTREG_2_LATCHER;



uart_2_rx_data_int <= uart_2_shiftreg_2_par_int;



drdy <= ((uart_2_drdy1 xor uart_2_drdy2) and uart_2_drdy1);

-- This fsm latches (just after) the dataready positive edge
-- signal. The data is guaranteed to be ready then.
WITH_UART_COMMS_ARBITER_0_FSM: process (clk) is
begin
    if rising_edge(clk) then
        if (comms_arbiter_0_delayed_reset2 = '1') then
            freq_manager_2_bussedram_8_rambus_we <= '0';
            freq_manager_2_bussedram_9_rambus_we <= '0';
            freq_manager_2_bussedram_10_rambus_we <= '0';
            freq_manager_2_bussedram_11_rambus_we <= '0';
            whichram <= to_unsigned(00, 8);
            state <= READWHICHRAM;
            comms_arbiter_0_latch_counter <= to_unsigned(00, 8);
            biggestblock_l(0) <= '0';
            biggestblock_l(1) <= '0';
            biggestblock_l(2) <= '0';
            biggestblock_l(3) <= '0';
            biggestblock_l(4) <= '0';
            biggestblock_l(5) <= '0';
            biggestblock_l(6) <= '0';
            biggestblock_l(7) <= '0';
            biggestblock_l(8) <= '0';
            biggestblock_l(9) <= '0';
            biggestblock_l(10) <= '0';
            biggestblock_l(11) <= '0';
            biggestblock_l(12) <= '0';
            biggestblock_l(13) <= '0';
            biggestblock_l(14) <= '0';
            biggestblock_l(15) <= '0';
            biggestblock_l(16) <= '0';
            biggestblock_l(17) <= '0';
            biggestblock_l(18) <= '0';
            biggestblock_l(19) <= '0';
            biggestblock_l(20) <= '0';
            biggestblock_l(21) <= '0';
            biggestblock_l(22) <= '0';
            biggestblock_l(23) <= '0';
            biggestblock_l(24) <= '0';
            biggestblock_l(25) <= '0';
            biggestblock_l(26) <= '0';
            biggestblock_l(27) <= '0';
            biggestblock_l(28) <= '0';
            biggestblock_l(29) <= '0';
            biggestblock_l(30) <= '0';
            biggestblock_l(31) <= '0';
            freq_rambus_length <= to_unsigned(00, 7);
            freq_rambus_addr <= to_unsigned(00, 8);
            all_data_received <= '0';
            fstep_rambus_length <= to_unsigned(00, 7);
            fstep_rambus_addr <= to_unsigned(00, 8);
            tstep_rambus_length <= to_unsigned(00, 7);
            tstep_rambus_addr <= to_unsigned(00, 8);
            hold_rambus_length <= to_unsigned(00, 7);
            hold_rambus_addr <= to_unsigned(00, 8);
        else
            if ((state = READWHICHRAM) and bool(comms_arbiter_0_drdy_turnedon)) then
                freq_manager_2_bussedram_8_rambus_we <= '0';
                freq_manager_2_bussedram_9_rambus_we <= '0';
                freq_manager_2_bussedram_10_rambus_we <= '0';
                freq_manager_2_bussedram_11_rambus_we <= '0';
                whichram <= rx_data;
                state <= PARSEFORRAM;
            elsif ((state = PARSEFORRAM) and bool(comms_arbiter_0_drdy_turnedon)) then
                comms_arbiter_0_latch_counter <= (comms_arbiter_0_latch_counter + 1);
                for i in 0 to 8-1 loop
                    biggestblock_l(to_integer(i + signed(resize(8 * comms_arbiter_0_latch_counter, 17)))) <= rx_data(i);
                end loop;
                if (comms_arbiter_0_latch_counter = 3) then
                    comms_arbiter_0_latch_counter <= to_unsigned(0, 8);
                    state <= SENDTORAM;
                end if;
            elsif (state = SENDTORAM) then
                case whichram is
                    when "00000000" =>
                        freq_manager_2_bussedram_8_rambus_we <= '1';
                        freq_rambus_length <= (freq_rambus_length + 1);
                        freq_rambus_addr <= (freq_rambus_addr + 1);
                        all_data_received <= '0';
                    when "00000001" =>
                        freq_manager_2_bussedram_9_rambus_we <= '1';
                        fstep_rambus_length <= (fstep_rambus_length + 1);
                        fstep_rambus_addr <= (fstep_rambus_addr + 1);
                        all_data_received <= '0';
                    when "00000010" =>
                        freq_manager_2_bussedram_10_rambus_we <= '1';
                        tstep_rambus_length <= (tstep_rambus_length + 1);
                        tstep_rambus_addr <= (tstep_rambus_addr + 1);
                        all_data_received <= '0';
                    when "00000011" =>
                        freq_manager_2_bussedram_11_rambus_we <= '1';
                        hold_rambus_length <= (hold_rambus_length + 1);
                        hold_rambus_addr <= (hold_rambus_addr + 1);
                        all_data_received <= '0';
                    when "00010110" =>
                        freq_manager_2_bussedram_8_rambus_we <= '0';
                        freq_manager_2_bussedram_9_rambus_we <= '0';
                        freq_manager_2_bussedram_10_rambus_we <= '0';
                        freq_manager_2_bussedram_11_rambus_we <= '0';
                        all_data_received <= '1';
                    when others =>
                        freq_manager_2_bussedram_8_rambus_we <= '0';
                        freq_manager_2_bussedram_9_rambus_we <= '0';
                        freq_manager_2_bussedram_10_rambus_we <= '0';
                        freq_manager_2_bussedram_11_rambus_we <= '0';
                end case;
                state <= READWHICHRAM;
            else
                freq_manager_2_bussedram_8_rambus_we <= '0';
                freq_manager_2_bussedram_9_rambus_we <= '0';
                freq_manager_2_bussedram_10_rambus_we <= '0';
                freq_manager_2_bussedram_11_rambus_we <= '0';
            end if;
        end if;
    end if;
end process WITH_UART_COMMS_ARBITER_0_FSM;

-- This is a little block for determining whether 
-- drdy has transitioned in the last clock cycle.
-- It effectively turns the drdy step function into 
-- a hat function.
WITH_UART_COMMS_ARBITER_0_DRDY_MONITOR: process (clk) is
begin
    if rising_edge(clk) then
        if (reset = '0') then
            freq_man_reset <= '0';
            comms_arbiter_0_drdy_old <= '1';
            comms_arbiter_0_drdy_turnedon <= '0';
        else
            freq_man_reset <= comms_arbiter_0_drdy_turnedon;
            comms_arbiter_0_drdy_old <= drdy;
            if ((drdy /= comms_arbiter_0_drdy_old) and (comms_arbiter_0_drdy_old = '0')) then
                comms_arbiter_0_drdy_turnedon <= '1';
            else
                comms_arbiter_0_drdy_turnedon <= '0';
            end if;
        end if;
    end if;
end process WITH_UART_COMMS_ARBITER_0_DRDY_MONITOR;


WITH_UART_COMMS_ARBITER_0_RESET_DELAYER: process (clk) is
begin
    if rising_edge(clk) then
        comms_arbiter_0_delayed_reset1 <= reset;
        comms_arbiter_0_delayed_reset2 <= comms_arbiter_0_delayed_reset1;
    end if;
end process WITH_UART_COMMS_ARBITER_0_RESET_DELAYER;

-- Just connect the notclock signal for passing into the RAMs  

notclock <= stdl((not bool(clk)));

-- Combinatorial logic here to determine
-- the schedule length as the smallest amount of data points stuck into the RAMs
WITH_UART_DETERMINE_SCHED_LEN: process (freq_rambus_length, fstep_rambus_length, tstep_rambus_length, hold_rambus_length) is
begin
    if ((freq_rambus_length < fstep_rambus_length) and (freq_rambus_length < tstep_rambus_length) and (freq_rambus_length < hold_rambus_length)) then
        sched_len <= freq_rambus_length;
    elsif ((tstep_rambus_length < fstep_rambus_length) and (tstep_rambus_length < freq_rambus_length) and (tstep_rambus_length < hold_rambus_length)) then
        sched_len <= tstep_rambus_length;
    elsif ((hold_rambus_length < fstep_rambus_length) and (hold_rambus_length < freq_rambus_length) and (hold_rambus_length < tstep_rambus_length)) then
        sched_len <= hold_rambus_length;
    else
        sched_len <= fstep_rambus_length;
    end if;
end process WITH_UART_DETERMINE_SCHED_LEN;

-- Connect basic signals of the RAMS: data in and data_out and clock

freq_rambus_din <= biggestblock(32-1 downto 0);
fstep_rambus_din <= biggestblock(32-1 downto 0);
tstep_rambus_din <= biggestblock(32-1 downto 0);
hold_rambus_din <= biggestblock(32-1 downto 0);
freq_rambus_clk <= notclock;
fstep_rambus_clk <= notclock;
tstep_rambus_clk <= notclock;
hold_rambus_clk <= notclock;
freq_rambus_waddr <= resize(freq_rambus_addr, 7);
fstep_rambus_waddr <= resize(fstep_rambus_addr, 7);
tstep_rambus_waddr <= resize(tstep_rambus_addr, 7);
hold_rambus_waddr <= resize(hold_rambus_addr, 7);



trigger_mask <= stdl(bool(trigger) and bool(all_data_received));


WITH_UART_LED_WIRING: process (led2_i, all_data_received, whichram) is
begin
    for i in 0 to 9-1 loop
        led2 <= led2_i;
    end loop;
    led2_l(8) <= all_data_received;
    for i in 0 to 8-1 loop
        led2_l(i) <= whichram(i);
    end loop;
end process WITH_UART_LED_WIRING;



amphenol <= pts_controller_2_amphenol_int;
pts_controller_2_amphenol_l(49) <= '0';
pts_controller_2_amphenol_l(48) <= '1';
pts_controller_2_amphenol_l(41) <= stdl((not True));
pts_controller_2_amphenol_l(20) <= '0';
pts_controller_2_amphenol_l(21) <= '0';
pts_controller_2_amphenol_l(22) <= '1';
pts_controller_2_amphenol_l(23) <= '1';
pts_controller_2_amphenol_l(24) <= '1';
pts_controller_2_amphenol_l(45) <= '1';
pts_controller_2_amphenol_l(46) <= '1';
pts_controller_2_amphenol_l(43) <= stdl((not bool(hex_freq(33))));
pts_controller_2_amphenol_l(42) <= stdl((not bool(hex_freq(32))));
pts_controller_2_amphenol_l(40) <= stdl((not bool(hex_freq(31))));
pts_controller_2_amphenol_l(39) <= stdl((not bool(hex_freq(30))));
pts_controller_2_amphenol_l(15) <= stdl((not bool(hex_freq(29))));
pts_controller_2_amphenol_l(14) <= stdl((not bool(hex_freq(28))));
pts_controller_2_amphenol_l(19) <= stdl((not bool(hex_freq(27))));
pts_controller_2_amphenol_l(18) <= stdl((not bool(hex_freq(26))));
pts_controller_2_amphenol_l(17) <= stdl((not bool(hex_freq(25))));
pts_controller_2_amphenol_l(16) <= stdl((not bool(hex_freq(24))));
pts_controller_2_amphenol_l(26) <= stdl((not bool(hex_freq(23))));
pts_controller_2_amphenol_l(25) <= stdl((not bool(hex_freq(22))));
pts_controller_2_amphenol_l(1) <= stdl((not bool(hex_freq(21))));
pts_controller_2_amphenol_l(0) <= stdl((not bool(hex_freq(20))));
pts_controller_2_amphenol_l(28) <= stdl((not bool(hex_freq(19))));
pts_controller_2_amphenol_l(27) <= stdl((not bool(hex_freq(18))));
pts_controller_2_amphenol_l(3) <= stdl((not bool(hex_freq(17))));
pts_controller_2_amphenol_l(2) <= stdl((not bool(hex_freq(16))));
pts_controller_2_amphenol_l(30) <= stdl((not bool(hex_freq(15))));
pts_controller_2_amphenol_l(29) <= stdl((not bool(hex_freq(14))));
pts_controller_2_amphenol_l(5) <= stdl((not bool(hex_freq(13))));
pts_controller_2_amphenol_l(4) <= stdl((not bool(hex_freq(12))));
pts_controller_2_amphenol_l(32) <= stdl((not bool(hex_freq(11))));
pts_controller_2_amphenol_l(31) <= stdl((not bool(hex_freq(10))));
pts_controller_2_amphenol_l(7) <= stdl((not bool(hex_freq(9))));
pts_controller_2_amphenol_l(6) <= stdl((not bool(hex_freq(8))));
pts_controller_2_amphenol_l(34) <= stdl((not bool(hex_freq(7))));
pts_controller_2_amphenol_l(33) <= stdl((not bool(hex_freq(6))));
pts_controller_2_amphenol_l(9) <= stdl((not bool(hex_freq(5))));
pts_controller_2_amphenol_l(8) <= stdl((not bool(hex_freq(4))));
pts_controller_2_amphenol_l(36) <= stdl((not bool(hex_freq(3))));
pts_controller_2_amphenol_l(35) <= stdl((not bool(hex_freq(2))));
pts_controller_2_amphenol_l(11) <= stdl((not bool(hex_freq(1))));
pts_controller_2_amphenol_l(10) <= stdl((not bool(hex_freq(0))));
pts_controller_2_amphenol_l(38) <= '0';
pts_controller_2_amphenol_l(37) <= '1';
pts_controller_2_amphenol_l(13) <= '1';
pts_controller_2_amphenol_l(12) <= '1';

end architecture MyHDL;
